[
    {
        "id": "2cb855bb60aebb1d",
        "type": "tab",
        "label": "Flow 2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "b1bf206e5641acec",
        "type": "tab",
        "label": "Flow 3",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "0fcf808d23b75bd6",
        "type": "tab",
        "label": "INIT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c094ed29488b99f5",
        "type": "tab",
        "label": "http serve",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "bc7c2dbf3c7d4ad5",
        "type": "tab",
        "label": "Node RED sensors flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b28ad62b928d3d7e",
        "type": "tab",
        "label": "Ioto Sensors Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b6742ae437b1a3ca",
        "type": "tab",
        "label": "NODE RED dash",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "937b4e5e178a38d6",
        "type": "tab",
        "label": "Exhibitions (1-2-3)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7e520411d015e3fa",
        "type": "tab",
        "label": "Dashboard temperature",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "9ace7b02e4cf5372",
        "type": "tab",
        "label": "Only Personal Exhibition",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6910decd06d508b7",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "49346e0e0c5c8a20",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Gill Sans,Geneva,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Century Gothic,CenturyGothic,AppleGothic,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "Century Gothic,CenturyGothic,AppleGothic,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Admin Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "d63d7cdc69f4db93",
        "type": "ui_group",
        "name": "title_button",
        "tab": "6910decd06d508b7",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9eb12f62ec02142d",
        "type": "ui_group",
        "name": "Temperature input",
        "tab": "6910decd06d508b7",
        "order": 2,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "50a396fd667d69c0",
        "type": "mqtt-broker",
        "name": "EMQX_",
        "broker": "broker.emqx.io",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a3babe3406e16d97",
        "type": "ui_tab",
        "name": "Simulation sensors",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "fc31d257cb0944f2",
        "type": "ui_group",
        "name": "Exhibition 1",
        "tab": "a3babe3406e16d97",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": true,
        "className": ""
    },
    {
        "id": "a8dcf1e718e6bbca",
        "type": "ui_group",
        "name": "Controller",
        "tab": "a3babe3406e16d97",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a3b5b427aefcaa62",
        "type": "ui_group",
        "name": "Summary main indicators",
        "tab": "a3babe3406e16d97",
        "order": 6,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e78f4a2ba5c5ef8b",
        "type": "ui_group",
        "name": "Exhibition 2",
        "tab": "a3babe3406e16d97",
        "order": 3,
        "disp": true,
        "width": "10",
        "collapse": true,
        "className": ""
    },
    {
        "id": "ab40b36f9d624cad",
        "type": "ui_group",
        "name": "Exhibition 3",
        "tab": "a3babe3406e16d97",
        "order": 4,
        "disp": true,
        "width": "10",
        "collapse": true,
        "className": ""
    },
    {
        "id": "9de5fce48495669b",
        "type": "ui_group",
        "name": "Restauration Room(Only Personal)",
        "tab": "a3babe3406e16d97",
        "order": 5,
        "disp": true,
        "width": "10",
        "collapse": true,
        "className": ""
    },
    {
        "id": "a11ec13ec23617f4",
        "type": "ui_spacer",
        "z": "9ace7b02e4cf5372",
        "name": "spacer",
        "group": "a3b5b427aefcaa62",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "938c251278ee5e93",
        "type": "ui_spacer",
        "z": "9ace7b02e4cf5372",
        "name": "spacer",
        "group": "a3b5b427aefcaa62",
        "order": 7,
        "width": 7,
        "height": 1
    },
    {
        "id": "8e189928e72163ca",
        "type": "ui_spacer",
        "z": "9ace7b02e4cf5372",
        "name": "spacer",
        "group": "a3b5b427aefcaa62",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "f94291f286102348",
        "type": "ui_spacer",
        "z": "9ace7b02e4cf5372",
        "name": "spacer",
        "group": "a3b5b427aefcaa62",
        "order": 14,
        "width": 7,
        "height": 1
    },
    {
        "id": "a87fcc058f335f0c",
        "type": "ui_spacer",
        "z": "9ace7b02e4cf5372",
        "name": "spacer",
        "group": "a3b5b427aefcaa62",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "67fbe2294d857c84",
        "type": "ui_spacer",
        "z": "9ace7b02e4cf5372",
        "name": "spacer",
        "group": "a3b5b427aefcaa62",
        "order": 21,
        "width": 7,
        "height": 1
    },
    {
        "id": "d6af197b0e1b782c",
        "type": "ui_spacer",
        "z": "9ace7b02e4cf5372",
        "name": "spacer",
        "group": "a3b5b427aefcaa62",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "0ace5383fc4d8821",
        "type": "postgreSQLConfig",
        "name": "ioto_db",
        "host": "HOST",
        "hostFieldType": "env",
        "port": "PORT",
        "portFieldType": "env",
        "database": "ioto",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "USER",
        "userFieldType": "env",
        "password": "maria",
        "passwordFieldType": "str"
    },
    {
        "id": "a13b654d9d4758cf",
        "type": "global-config",
        "env": [
            {
                "name": "HOST",
                "value": "127.0.0.1",
                "type": "str"
            },
            {
                "name": "PORT",
                "value": "5432",
                "type": "num"
            },
            {
                "name": "USER",
                "value": "postgres",
                "type": "str"
            }
        ]
    },
    {
        "id": "484c21f9aff6a5c5",
        "type": "inject",
        "z": "2cb855bb60aebb1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "ea2e77200637e812"
            ]
        ]
    },
    {
        "id": "ea2e77200637e812",
        "type": "http request",
        "z": "2cb855bb60aebb1d",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_month.csv",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 140,
        "wires": [
            [
                "9965590cb63d6860"
            ]
        ]
    },
    {
        "id": "9965590cb63d6860",
        "type": "csv",
        "z": "2cb855bb60aebb1d",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 630,
        "y": 140,
        "wires": [
            [
                "86da2030f8b0e3b9",
                "4913b54457b014d3"
            ]
        ]
    },
    {
        "id": "86da2030f8b0e3b9",
        "type": "switch",
        "z": "2cb855bb60aebb1d",
        "name": "",
        "property": "payload.mag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "7",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 300,
        "wires": [
            [
                "2ff8c47dc73e9898"
            ]
        ]
    },
    {
        "id": "2ff8c47dc73e9898",
        "type": "change",
        "z": "2cb855bb60aebb1d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "PANIC !",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 300,
        "wires": [
            [
                "6904d78054fa44e8"
            ]
        ]
    },
    {
        "id": "6904d78054fa44e8",
        "type": "debug",
        "z": "2cb855bb60aebb1d",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 300,
        "wires": []
    },
    {
        "id": "4913b54457b014d3",
        "type": "debug",
        "z": "2cb855bb60aebb1d",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 140,
        "wires": []
    },
    {
        "id": "4ac65f44dd3f5b7a",
        "type": "http in",
        "z": "b1bf206e5641acec",
        "name": "",
        "url": "/test",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 920,
        "y": 760,
        "wires": [
            [
                "56d357d78edccb6e"
            ]
        ]
    },
    {
        "id": "56d357d78edccb6e",
        "type": "template",
        "z": "b1bf206e5641acec",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "plain",
        "template": "{\n    \"sensor_id\": \"air-quality-005\",\n    \"type\": \"air_quality\",\n    \"location\": \"living_room\",\n    \"timestamp\": \"2024-07-29T14:24:00Z\",\n    \"data\": {\n        \"pm2.5\": 12.3,\n        \"pm10\": 18.7,\n        \"co2_ppm\": 400\n    },\n    \"status\": \"active\",\n    \"battery_level_percentage\": 78\n}",
        "output": "str",
        "x": 1120,
        "y": 760,
        "wires": [
            [
                "7a5e7d7b5b8fad09"
            ]
        ]
    },
    {
        "id": "7a5e7d7b5b8fad09",
        "type": "http response",
        "z": "b1bf206e5641acec",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1330,
        "y": 760,
        "wires": []
    },
    {
        "id": "4f7e342228d15108",
        "type": "http request",
        "z": "b1bf206e5641acec",
        "name": "POST add sensor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/sensors",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 140,
        "wires": [
            [
                "791fb40ffbe0b3a8"
            ]
        ]
    },
    {
        "id": "5702015969cf159e",
        "type": "inject",
        "z": "b1bf206e5641acec",
        "name": "inject web sensor",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"name\":\"thermostat\",\"measure\":\"temperature\", \"method\": \"web\"}",
        "payloadType": "json",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "4f7e342228d15108"
            ]
        ]
    },
    {
        "id": "791fb40ffbe0b3a8",
        "type": "debug",
        "z": "b1bf206e5641acec",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 140,
        "wires": []
    },
    {
        "id": "20633a34d8209254",
        "type": "http request",
        "z": "b1bf206e5641acec",
        "name": "GET observations for thermostat web",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/observations?method=web&sensor=thermostat",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 400,
        "wires": [
            [
                "667cd2907e2b45cb"
            ]
        ]
    },
    {
        "id": "a8d7e04e1500c95c",
        "type": "inject",
        "z": "b1bf206e5641acec",
        "name": "start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "20633a34d8209254"
            ]
        ]
    },
    {
        "id": "a80b073598dcdccf",
        "type": "http request",
        "z": "b1bf206e5641acec",
        "name": "GET sensors web",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/sensors?method=web",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 240,
        "wires": [
            [
                "667cd2907e2b45cb"
            ]
        ]
    },
    {
        "id": "a89a736e2cb7ed29",
        "type": "http request",
        "z": "b1bf206e5641acec",
        "name": "GET sensors ioto",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/sensors?method=ontology&format=turtle",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 320,
        "wires": [
            [
                "667cd2907e2b45cb"
            ]
        ]
    },
    {
        "id": "3658f0dafd4ee2de",
        "type": "inject",
        "z": "b1bf206e5641acec",
        "name": "start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "a89a736e2cb7ed29"
            ]
        ]
    },
    {
        "id": "a261aba8548de6cb",
        "type": "inject",
        "z": "b1bf206e5641acec",
        "name": "start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "a80b073598dcdccf"
            ]
        ]
    },
    {
        "id": "3130d4dc982c66d9",
        "type": "http request",
        "z": "b1bf206e5641acec",
        "name": "POST add observation web",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/observations",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 480,
        "wires": [
            [
                "667cd2907e2b45cb"
            ]
        ]
    },
    {
        "id": "dad9e65d45911df2",
        "type": "inject",
        "z": "b1bf206e5641acec",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"sensor\":\"thermostat\", \"method\": \"web\", \"value\":45}",
        "payloadType": "json",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "3130d4dc982c66d9"
            ]
        ]
    },
    {
        "id": "8482c9f0715f8a66",
        "type": "inject",
        "z": "b1bf206e5641acec",
        "name": "inject ioto sensor",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"name\":\"thermostat\",\"measure\":\"temperature\", \"method\": \"ontology\"}",
        "payloadType": "json",
        "x": 180,
        "y": 160,
        "wires": [
            [
                "4f7e342228d15108"
            ]
        ]
    },
    {
        "id": "667cd2907e2b45cb",
        "type": "debug",
        "z": "b1bf206e5641acec",
        "name": "API response.payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 460,
        "wires": []
    },
    {
        "id": "0714d7511afa0c9b",
        "type": "http request",
        "z": "b1bf206e5641acec",
        "name": "GET environment conditions web",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/env_current_state?method=web",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 540,
        "wires": [
            [
                "667cd2907e2b45cb"
            ]
        ]
    },
    {
        "id": "30f9d787c8e62a06",
        "type": "inject",
        "z": "b1bf206e5641acec",
        "name": "start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 540,
        "wires": [
            [
                "399e07adabd46142"
            ]
        ]
    },
    {
        "id": "abc7e7942c51b19f",
        "type": "http request",
        "z": "b1bf206e5641acec",
        "name": "POST add visitor web",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/visitors",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 420,
        "y": 720,
        "wires": [
            [
                "667cd2907e2b45cb"
            ]
        ]
    },
    {
        "id": "a512fdc4defb2f5c",
        "type": "inject",
        "z": "b1bf206e5641acec",
        "name": "inject Juan",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"name\":\"Juan\", \"role\":\"admin\"}",
        "payloadType": "json",
        "x": 180,
        "y": 720,
        "wires": [
            [
                "abc7e7942c51b19f"
            ]
        ]
    },
    {
        "id": "9cdbd06476ae0317",
        "type": "http request",
        "z": "b1bf206e5641acec",
        "name": "GET count_visitors",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/count_visitors",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 600,
        "wires": [
            [
                "667cd2907e2b45cb"
            ]
        ]
    },
    {
        "id": "399e07adabd46142",
        "type": "http request",
        "z": "b1bf206e5641acec",
        "name": "GET list_visitors",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/list_visitors",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 400,
        "y": 640,
        "wires": [
            [
                "667cd2907e2b45cb"
            ]
        ]
    },
    {
        "id": "ce95067c3b8d559e",
        "type": "inject",
        "z": "0fcf808d23b75bd6",
        "name": "GET initial lists",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 180,
        "y": 440,
        "wires": [
            [
                "fd4e95a17e81b474",
                "d4669fd8936988ba",
                "eef1d99c1ddbef5c"
            ]
        ]
    },
    {
        "id": "fd4e95a17e81b474",
        "type": "http request",
        "z": "0fcf808d23b75bd6",
        "name": "randomListFemaleNames",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://www.randomlists.com/data/names-female.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 420,
        "wires": [
            [
                "c6754ccb73eccca3"
            ]
        ]
    },
    {
        "id": "c6754ccb73eccca3",
        "type": "function",
        "z": "0fcf808d23b75bd6",
        "name": "set Female Names",
        "func": "let fetchedInfo = msg.payload.data\n\nif ( fetchedInfo.length > 0){\n    msg.payload.result = \"female info info fetch!\" \n} else{\n    msg.payload.result = \"female info error fetching\" \n}\nglobal.set(\"femaleNames\", fetchedInfo);\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 420,
        "wires": [
            [
                "5a1ee711024a7272"
            ]
        ]
    },
    {
        "id": "5a1ee711024a7272",
        "type": "debug",
        "z": "0fcf808d23b75bd6",
        "name": "Verify Info fetched",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 460,
        "wires": []
    },
    {
        "id": "d4669fd8936988ba",
        "type": "http request",
        "z": "0fcf808d23b75bd6",
        "name": "randomListMaleNames",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://www.randomlists.com/data/names-male.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 460,
        "wires": [
            [
                "1c74cdcca3e4bcc6"
            ]
        ]
    },
    {
        "id": "1c74cdcca3e4bcc6",
        "type": "function",
        "z": "0fcf808d23b75bd6",
        "name": "set Male Names",
        "func": "let fetchedInfo = msg.payload.data\n\nif ( fetchedInfo.length > 0){\n    msg.payload.result = \"male info fetch!\" \n} else{\n    msg.payload.result = \"male info error fetching\" \n}\nglobal.set(\"maleNames\", fetchedInfo);\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 460,
        "wires": [
            [
                "5a1ee711024a7272"
            ]
        ]
    },
    {
        "id": "eef1d99c1ddbef5c",
        "type": "http request",
        "z": "0fcf808d23b75bd6",
        "name": "randomListLastNames",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://www.randomlists.com/data/names-surnames.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 500,
        "wires": [
            [
                "c2dd7a9ffcb9343e"
            ]
        ]
    },
    {
        "id": "c2dd7a9ffcb9343e",
        "type": "function",
        "z": "0fcf808d23b75bd6",
        "name": "set Last Names",
        "func": "let fetchedInfo = msg.payload.data\n\nif ( fetchedInfo.length > 0){\n    msg.payload.result = \"lastname info fetch!\" \n} else{\n    msg.payload.result = \"lastname info error fetching\" \n}\nglobal.set(\"lastNames\", fetchedInfo);\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 500,
        "wires": [
            [
                "5a1ee711024a7272"
            ]
        ]
    },
    {
        "id": "35fe94b7e97860a8",
        "type": "comment",
        "z": "0fcf808d23b75bd6",
        "name": "Only run ONCE",
        "info": "",
        "x": 160,
        "y": 340,
        "wires": []
    },
    {
        "id": "a35e73f62f82dad1",
        "type": "mqtt out",
        "z": "0fcf808d23b75bd6",
        "name": "",
        "topic": "/api_response",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "50a396fd667d69c0",
        "x": 1040,
        "y": 340,
        "wires": []
    },
    {
        "id": "3dedec11a8687ce5",
        "type": "function",
        "z": "0fcf808d23b75bd6",
        "name": "Declare Global Variables",
        "func": "global.set(\"visitors\", 0);\nglobal.set(\"visitorsConsent\", 0);\nglobal.set(\"visitorsNotConsent\", 0);\nglobal.set(\"countExhibition1\", 0);\nglobal.set(\"countExhibition2\", 0);\nglobal.set(\"countExhibition3\", 0);\nglobal.set(\"countOnlyPersonal\", 0);\nglobal.set(\"listPersonal\",{\"visitors\":[]})\nglobal.set(\"listExhibition1\",{\"visitors\":[]})\nglobal.set(\"listExhibition2\",{\"visitors\":[]})\nglobal.set(\"listExhibition3\",{\"visitors\":[]})\n\nglobal.set(\"paintsExhibition1\", {\n    \"money_valuable\": 2,\n    \"source_valuable\": 2,\n    \"normal\": 4,\n})\nglobal.set(\"paintsExhibition2\", {\n    \"money_valuable\": 4,\n    \"source_valuable\": 1,\n    \"normal\": 5,\n})\nglobal.set(\"paintsExhibition3\", {\n    \"money_valuable\": 1,\n    \"source_valuable\": 3,\n    \"normal\": 7,\n})\n\nglobal.set(\"paintsOnlyPersonal\", {\n    \"money_valuable\": 2,\n    \"source_valuable\": 5,\n    \"normal\": 3,\n})\n\nglobal.set(\"observationsInRoom1\", 11);\n\nmsg.payload = \"Global variables inizialated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 100,
        "wires": [
            [
                "d772aaf580a401a4"
            ]
        ]
    },
    {
        "id": "93ea8c8c103ec718",
        "type": "inject",
        "z": "0fcf808d23b75bd6",
        "name": "INIT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "3dedec11a8687ce5"
            ]
        ]
    },
    {
        "id": "d772aaf580a401a4",
        "type": "debug",
        "z": "0fcf808d23b75bd6",
        "name": "msg.payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 100,
        "wires": []
    },
    {
        "id": "033b2389953cd0fb",
        "type": "http in",
        "z": "c094ed29488b99f5",
        "name": "temperature",
        "url": "/temperature",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 180,
        "wires": [
            [
                "48359ce3a02d6d27"
            ]
        ]
    },
    {
        "id": "48359ce3a02d6d27",
        "type": "template",
        "z": "c094ed29488b99f5",
        "name": "html web page",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<html>\n    <head>\n        <title> Temperature dash </title>\n    </head>\n    <body>\n        <h1>Here can be the Temperature dashboard</h1>\n    </body>\n</html>",
        "output": "str",
        "x": 480,
        "y": 180,
        "wires": [
            [
                "c3add2ff8176dfa4"
            ]
        ]
    },
    {
        "id": "c3add2ff8176dfa4",
        "type": "http response",
        "z": "c094ed29488b99f5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 180,
        "wires": []
    },
    {
        "id": "fbad587c05664610",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for temp - Exhibition 1",
        "func": "msg.payload = {}\nfunction simulateTemperatureWithFluctuation(baseTemp, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return (baseTemp + fluctuation).toFixed(2);\n}\n\nconst baseTemp = 22; // Base temperature in °C\nconst fluctuationRange = 5; // Maximum fluctuation range in °C\n\n//let generated_value = Math.floor(Math.random() * 50)+1;\nlet generated_value =  simulateTemperatureWithFluctuation(baseTemp, fluctuationRange);\nlet temperature_type = \"\"\nif (generated_value < 10){\n    temperature_type = \"Low\"\n}else{\n    if(generated_value >= 30){\n        temperature_type = \"High\"\n    }else{\n        temperature_type = \"Normal\"\n    }\n}\nmsg.payload.value = generated_value\nmsg.payload.evaluation = temperature_type\nmsg.payload.extra_info = {\n    \"unit\": \"Celsius\"\n}\nmsg.payload.sensor = \"tempSensor01\"\nmsg.topic = \"/ioto/sensors1/thermostat/updated\"\nglobal.set(\"observationsInRoom1\", global.get(\"observationsInRoom1\")+1);\nlet observationID = global.get(\"observationsInRoom1\")\nmsg.params = [observationID, 1, generated_value, temperature_type, 1];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 280,
        "wires": [
            [
                "bdbdbd680b6e99a1",
                "8fbd5a90a59d5457"
            ]
        ]
    },
    {
        "id": "c262fcb94eda0fba",
        "type": "comment",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "TODO: change topics to something more specific",
        "info": "",
        "x": 1580,
        "y": 420,
        "wires": []
    },
    {
        "id": "bdbdbd680b6e99a1",
        "type": "mqtt out",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "50a396fd667d69c0",
        "x": 1170,
        "y": 820,
        "wires": []
    },
    {
        "id": "0a417571dfc60302",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for air quallity - Exhibition 1",
        "func": "function simulateAirQuality(baseAQI, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return Math.max(0, (baseAQI + fluctuation).toFixed(2)); // Ensure AQI doesn't go below 0\n}\nconst baseAQI = 50; // Air quality index\nconst aqiFluctuation = 20;\n\n//let infrared_value =  Math.floor(Math.random() * 120)+1;\nlet infrared_value = simulateAirQuality(baseAQI, aqiFluctuation);\nmsg.payload = {}\nmsg.payload.sensor = \"infrared\"\nmsg.payload.extra_info = {}\nif (infrared_value > 100){\n    msg.payload.extra_info.ica = \"Dangerous for sensible groups\"\n}else{\n    if (infrared_value >50){\n        msg.payload.extra_info.ica = \"Moderate\"\n    }else{\n        msg.payload.extra_info.ica = \"Good\"\n    }\n}\nmsg.payload.value = infrared_value\nmsg.topic = \"/ioto/sensors1/infrared/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 340,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "ccc0de180b64bcc5",
        "type": "mqtt in",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "",
        "topic": "noder_red/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 780,
        "wires": [
            [
                "0a417571dfc60302",
                "fbad587c05664610",
                "dd25af7c3a32e7d4",
                "1bdc4f31e6698916",
                "db019e4f02477302",
                "8ea67c4d0ae3f57d",
                "031ce9a9d777df0a",
                "5d14e1952045fcc5",
                "a5ffd5b730e177d8",
                "7d7e9d0bac07cf45",
                "578f1dccecd5918d",
                "ec0411d980768e64",
                "89b0ed76316b2a81",
                "2c6e5be6483ff03c",
                "c256938c6328e5b1",
                "e0487c1b185ee4cd",
                "6a677a973d743ddd",
                "6840d92d02b01572",
                "a902f1bbaccdac07",
                "84b9dbb59a700dbc"
            ]
        ]
    },
    {
        "id": "52c7b48df158365f",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random external visitor",
        "func": "\nconst roles_options = [\"admin\", \"personal\", \"external_visitor\"]\nconst exhibitions_options = [\"Exhibition1\", \"Exhibition2\", \"Exhibition3\", \"OnlyPersonal\"]\n\nfunction pickRandom(list) {\n  if (!list || list.length === 0) {\n    throw new Error(\"pickRandom: List is undefined or empty.\");\n  }\n   return list[Math.floor(Math.random() * list.length)];\n}\n\nfunction generateRole(){\n  let probabilityPersonal = 0.3;   \n  let randomNumber = Math.random()\n  if ( randomNumber > probabilityPersonal){\n    return \"visitor\"\n  }else{\n    return \"personal\"\n  }\n}\n\nlet femaleNames = global.get(\"femaleNames\") || [];\nlet maleNames = global.get(\"maleNames\") || [];\nlet lastNames = global.get(\"lastNames\") || [];\n\nfunction createVisitor(designatedId){\n  let newVisitor = {};\n  let gender = pickRandom(['male', 'female'])\n  let nameVisitor=''\n  if (gender == 'female'){\n    nameVisitor = pickRandom(femaleNames)\n  }else{\n    nameVisitor = pickRandom(maleNames)\n  }\n  newVisitor = {\n    \"id\": designatedId,\n    \"role\": generateRole(),\n    \"gender\":gender,\n    \"name\": nameVisitor,\n    \"lastname\": pickRandom(lastNames),\n    \"consent\": pickRandom([true, false])\n  }\n  return newVisitor\n}\n\nfunction generateVisitor() {\n  let numVisitors = global.get(\"visitors\")\n  let exhibition_picked = pickRandom(exhibitions_options)\n  global.set(\"count\" + exhibition_picked, global.get(\"count\" + exhibition_picked) + 1)\n\n  let listKey = \"list\" + exhibition_picked;\n  let tempList = global.get(listKey) || { \"visitors\": [] };\n  let newVisitor = createVisitor(numVisitors + 1)\n  tempList.visitors.push(newVisitor);\n\n  global.set(\"visitors\", numVisitors +1);\n  if (newVisitor.consent){\n    global.set(\"visitorsConsent\", global.get(\"visitorsConsent\")+1);\n  }else{\n    global.set(\"visitorsNotConsent\", global.get(\"visitorsNotConsent\")+1);\n  }\n  return newVisitor\n}\n\nfunction deleteVisitor() {\n    // Pick a random exhibition\n    let exhibition_picked = pickRandom(exhibitions_options);\n    \n    // Get the list of visitors for the picked exhibition\n    let listKey = \"list\" + exhibition_picked;\n    let tempList = global.get(listKey) || { \"visitors\": [] };\n\n    // Ensure there are visitors to remove\n    if (tempList.visitors.length > 0 && global.get(\"count\" + exhibition_picked) > 0) {\n        // Randomly pick a visitor ID from the specific exhibition's visitor list\n        let randomIndex = Math.floor(Math.random() * tempList.visitors.length);\n        let idToRemove = tempList.visitors[randomIndex].id;\n\n        // Update the exhibition-specific count\n        global.set(\"count\" + exhibition_picked, global.get(\"count\" + exhibition_picked) - 1);\n\n        // Remove the visitor from the specific exhibition list\n        tempList.visitors = removeVisitor(tempList.visitors, idToRemove);\n\n        // Update the global list and visitor count\n        global.set(listKey, tempList);\n        global.set(\"visitors\", (global.get(\"visitors\") || 0) - 1);\n\n        return {\n            idToRemove: idToRemove,\n            exhibition_picked: exhibition_picked,\n            num_visitors: global.get(\"visitors\"),\n        };\n    }\n\n    // If no visitors to remove\n    return {\n        idToRemove: null,\n        exhibition_picked: exhibition_picked,\n        num_visitors: global.get(\"visitors\"),\n    };\n}\n\n\nfunction removeVisitor(visitorList, visitorId) {\n    // Get the visitor to be removed\n    const visitorToRemove = visitorList.find(visitor => visitor.id === visitorId);\n\n    if (visitorToRemove) {\n        // Check the consent property and update global variables\n        if (visitorToRemove.consent === true) {\n          global.set(\"visitorsConsent\", (global.get(\"visitorsConsent\") - 1));\n        } else if (visitorToRemove.consent === false) {\n          global.set(\"visitorsNotConsent\", (global.get(\"visitorsNotConsent\") - 1));\n        }\n    }\n\n    // Return the updated list without the removed visitor\n    return visitorList.filter(visitor => visitor.id !== visitorId);\n}\n\nlet pickActionEnter = pickRandom([true, false])\nif (pickActionEnter){\n  msg.payload = generateVisitor()\n}else{\n  let numVisitors = global.get(\"visitors\")\n  if (numVisitors > 3){\n    msg.payload = deleteVisitor()\n  }  \n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 60,
        "wires": [
            [
                "d19bfb9c1bafed39",
                "a875589655e2423a",
                "9c78b33ab0eb4e23"
            ]
        ]
    },
    {
        "id": "d19bfb9c1bafed39",
        "type": "debug",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "debug external_visitor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 100,
        "wires": []
    },
    {
        "id": "a4cf9f5c318fc2a3",
        "type": "inject",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "EXTERNAL_VISITOR_ENTERS",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 270,
        "y": 100,
        "wires": [
            [
                "52c7b48df158365f"
            ]
        ]
    },
    {
        "id": "a875589655e2423a",
        "type": "mqtt out",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "",
        "topic": "/ioto/visitors/new",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "50a396fd667d69c0",
        "x": 980,
        "y": 40,
        "wires": []
    },
    {
        "id": "dd25af7c3a32e7d4",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for illumination - Exhibition 1",
        "func": "function generate_lux_value(){\n    return Math.floor(Math.random() * 500)+1;\n\n}\nfunction simulateIllumination(baseLux, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return Math.max(0, (baseLux + fluctuation).toFixed(2)); // Ensure lux doesn't go below 0\n}\nconst baseLux = 400; // Illumination in lux\nconst luxFluctuation = 100;\n\nlet lux_value = simulateIllumination(baseLux, luxFluctuation);\nmsg.payload = {}\nmsg.payload.sensor = \"light_meter\"\nmsg.payload.extra_info = {}\nmsg.payload.extra_info.unit = \"lux\"\nif (lux_value > 300){\n    msg.payload.extra_info.room_ilumination = \"High\"\n}else{\n    if (lux_value >100){\n        msg.payload.extra_info.room_ilumination = \"Medium\"\n    }else{\n        msg.payload.extra_info.room_ilumination = \"Low\"\n    }\n}\n\nmsg.payload.value = lux_value\nmsg.topic = \"/ioto/sensors1/illumination/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 400,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "1bdc4f31e6698916",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for smoke_detector - Exhibition 1",
        "func": "msg.payload = {}\n\nlet generated_value = Math.floor(Math.random() * 2)+1;\nlet possible_values = [\"Yes\", \"No\"]\nmsg.payload.value = possible_values[generated_value-1]\nmsg.payload.sensor = \"smoke_detector\"\nmsg.topic = \"/ioto/sensors1/smoke/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 460,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "d8da29049b8d1f7d",
        "type": "mqtt in",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "",
        "topic": "noder_red/visitors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 40,
        "wires": [
            [
                "52c7b48df158365f"
            ]
        ]
    },
    {
        "id": "db019e4f02477302",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for temp - Exhibition 2",
        "func": "msg.payload = {}\n\nfunction simulateTemperatureWithFluctuation(baseTemp, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return (baseTemp + fluctuation).toFixed(2);\n}\n\nconst baseTemp = 22; // Base temperature in °C\nconst fluctuationRange = 5; // Maximum fluctuation range in °C\n\n//let generated_value = Math.floor(Math.random() * 50)+1;\nlet generated_value =  simulateTemperatureWithFluctuation(baseTemp, fluctuationRange);\n\nlet temperature_type = \"\"\nif (generated_value < 10){\n    temperature_type = \"Low\"\n}else{\n    if(generated_value >= 30){\n        temperature_type = \"High\"\n    }else{\n        temperature_type = \"Normal\"\n    }\n}\nmsg.payload.value = generated_value\nmsg.payload.extra_info = {\n    \"unit\": \"Celsius\",\n    \"temperature_type\": temperature_type,\n}\nmsg.payload.sensor = \"thermostat\"\nmsg.topic = \"/ioto/sensors2/thermostat/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 660,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "8ea67c4d0ae3f57d",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for air quallity - Exhibition 2",
        "func": "function simulateAirQuality(baseAQI, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return Math.max(0, (baseAQI + fluctuation).toFixed(2)); // Ensure AQI doesn't go below 0\n}\nconst baseAQI = 50; // Air quality index\nconst aqiFluctuation = 20;\n\n//let infrared_value =  Math.floor(Math.random() * 120)+1;\nlet infrared_value = simulateAirQuality(baseAQI, aqiFluctuation);\n\nmsg.payload = {}\nmsg.payload.sensor = \"infrared\"\nmsg.payload.extra_info = {}\nif (infrared_value > 100){\n    msg.payload.extra_info.ica = \"Dangerous for sensible groups\"\n}else{\n    if (infrared_value >50){\n        msg.payload.extra_info.ica = \"Moderate\"\n    }else{\n        msg.payload.extra_info.ica = \"Good\"\n    }\n}\nmsg.payload.value = infrared_value\nmsg.topic = \"/ioto/sensors2/infrared/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 720,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "031ce9a9d777df0a",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for illumination - Exhibition 2",
        "func": "function simulateIllumination(baseLux, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return Math.max(0, (baseLux + fluctuation).toFixed(2)); // Ensure lux doesn't go below 0\n}\n\nconst baseLux = 400; // Illumination in lux\nconst luxFluctuation = 100;\n\nlet lux_value = simulateIllumination(baseLux, luxFluctuation);\n\nmsg.payload = {}\nmsg.payload.sensor = \"light_meter\"\nmsg.payload.extra_info = {}\nmsg.payload.extra_info.unit = \"lux\"\nif (lux_value > 300){\n    msg.payload.extra_info.room_ilumination = \"High\"\n}else{\n    if (lux_value >100){\n        msg.payload.extra_info.room_ilumination = \"Medium\"\n    }else{\n        msg.payload.extra_info.room_ilumination = \"Low\"\n    }\n}\nmsg.payload.value = lux_value\nmsg.topic = \"/ioto/sensors2/illumination/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 780,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "5d14e1952045fcc5",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for smoke_detector - Exhibition 2",
        "func": "msg.payload = {}\n\nlet generated_value = Math.floor(Math.random() * 2)+1;\nlet possible_values = [\"Yes\", \"No\"]\nmsg.payload.value = possible_values[generated_value-1]\nmsg.payload.sensor = \"smoke_detector\"\nmsg.topic = \"/ioto/sensors2/smoke/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 840,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "a5ffd5b730e177d8",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for noise - Exhibition 1",
        "func": "msg.payload = {}\nfunction simulateNoise(baseDb, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return Math.max(0, (baseDb + fluctuation).toFixed(2)); // Ensure dB doesn't go below 0\n}\nconst baseDb = 40; // Noise level in decibels\nconst dbFluctuation = 10;   \n\nlet sound_value =  simulateNoise(baseDb, dbFluctuation);\nmsg.payload.value = sound_value\nmsg.payload.sensor = \"noise_detector\"\nmsg.topic = \"/ioto/sensors1/noise/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 520,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "7d7e9d0bac07cf45",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for noise - Exhibition 2",
        "func": "msg.payload = {}\n\nfunction simulateNoise(baseDb, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return Math.max(0, (baseDb + fluctuation).toFixed(2)); // Ensure dB doesn't go below 0\n}\nconst baseDb = 40; // Noise level in decibels\nconst dbFluctuation = 10;   \n\nlet sound_value =  simulateNoise(baseDb, dbFluctuation);\nmsg.payload.value = sound_value\nmsg.payload.sensor = \"noise_detector\"\nmsg.topic = \"/ioto/sensors2/noise/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 880,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "578f1dccecd5918d",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for temp - Exhibition 3",
        "func": "msg.payload = {}\n\nfunction simulateTemperatureWithFluctuation(baseTemp, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return (baseTemp + fluctuation).toFixed(2);\n}\n\nconst baseTemp = 22; // Base temperature in °C\nconst fluctuationRange = 5; // Maximum fluctuation range in °C\n\n//let generated_value = Math.floor(Math.random() * 50)+1;\nlet generated_value =  simulateTemperatureWithFluctuation(baseTemp, fluctuationRange);\n\nlet temperature_type = \"\"\nif (generated_value < 10){\n    temperature_type = \"Low\"\n}else{\n    if(generated_value >= 30){\n        temperature_type = \"High\"\n    }else{\n        temperature_type = \"Normal\"\n    }\n}\nmsg.payload.value = generated_value\nmsg.payload.extra_info = {\n    \"unit\": \"Celsius\",\n    \"temperature_type\": temperature_type,\n}\nmsg.payload.sensor = \"thermostat\"\nmsg.topic = \"/ioto/sensors3/thermostat/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 980,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "ec0411d980768e64",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for air quallity - Exhibition 3",
        "func": "function simulateAirQuality(baseAQI, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return Math.max(0, (baseAQI + fluctuation).toFixed(2)); // Ensure AQI doesn't go below 0\n}\nconst baseAQI = 50; // Air quality index\nconst aqiFluctuation = 20;\n\n//let infrared_value =  Math.floor(Math.random() * 120)+1;\nlet infrared_value = simulateAirQuality(baseAQI, aqiFluctuation);\n\nmsg.payload = {}\nmsg.payload.sensor = \"infrared\"\nmsg.payload.extra_info = {}\nif (infrared_value > 100){\n    msg.payload.extra_info.ica = \"Dangerous for sensible groups\"\n}else{\n    if (infrared_value >50){\n        msg.payload.extra_info.ica = \"Moderate\"\n    }else{\n        msg.payload.extra_info.ica = \"Good\"\n    }\n}\nmsg.payload.value = infrared_value\nmsg.topic = \"/ioto/sensors3/infrared/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1020,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "89b0ed76316b2a81",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for smoke_detector - Exhibition 3",
        "func": "msg.payload = {}\n\nlet generated_value = Math.floor(Math.random() * 2)+1;\nlet possible_values = [\"Yes\", \"No\"]\nmsg.payload.value = possible_values[generated_value-1]\nmsg.payload.sensor = \"smoke_detector\"\nmsg.topic = \"/ioto/sensors3/smoke/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1140,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "2c6e5be6483ff03c",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for noise - Exhibition 3",
        "func": "msg.payload = {}\n\nfunction simulateNoise(baseDb, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return Math.max(0, (baseDb + fluctuation).toFixed(2)); // Ensure dB doesn't go below 0\n}\nconst baseDb = 40; // Noise level in decibels\nconst dbFluctuation = 10;   \n\nlet sound_value =  simulateNoise(baseDb, dbFluctuation);\nmsg.payload.value = sound_value\nmsg.payload.sensor = \"noise_detector\"\nmsg.topic = \"/ioto/sensors3/noise/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1180,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "7a80d3b717c5348f",
        "type": "mqtt out",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "",
        "topic": "/ioto/visitors/access_event",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "50a396fd667d69c0",
        "x": 1250,
        "y": 160,
        "wires": []
    },
    {
        "id": "9c78b33ab0eb4e23",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "function 19",
        "func": "if(msg.payload.role == 'visitor' && msg.payload.exhibition==\"OnlyPersonal\"){\n    return msg;\n}\nreturn null\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 160,
        "wires": [
            [
                "7a80d3b717c5348f",
                "9c833c4850ace705"
            ]
        ]
    },
    {
        "id": "9c833c4850ace705",
        "type": "debug",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 240,
        "wires": []
    },
    {
        "id": "c256938c6328e5b1",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for illumination - Exhibition 3",
        "func": "function simulateIllumination(baseLux, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return Math.max(0, (baseLux + fluctuation).toFixed(2)); // Ensure lux doesn't go below 0\n}\n\nconst baseLux = 400; // Illumination in lux\nconst luxFluctuation = 100;\n\nlet lux_value = simulateIllumination(baseLux, luxFluctuation);\n\nmsg.payload = {}\nmsg.payload.sensor = \"light_meter\"\nmsg.payload.extra_info = {}\nmsg.payload.extra_info.unit = \"lux\"\nif (lux_value > 300){\n    msg.payload.extra_info.room_ilumination = \"High\"\n}else{\n    if (lux_value >100){\n        msg.payload.extra_info.room_ilumination = \"Medium\"\n    }else{\n        msg.payload.extra_info.room_ilumination = \"Low\"\n    }\n}\nmsg.payload.value = lux_value\nmsg.topic = \"/ioto/sensors3/illumination/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1080,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "e0487c1b185ee4cd",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for temp - OnlyPersonal",
        "func": "msg.payload = {}\n\nfunction simulateTemperatureWithFluctuation(baseTemp, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return (baseTemp + fluctuation).toFixed(2);\n}\n\nconst baseTemp = 22; // Base temperature in °C\nconst fluctuationRange = 5; // Maximum fluctuation range in °C\n\nlet generated_value =  simulateTemperatureWithFluctuation(baseTemp, fluctuationRange);\n\nlet temperature_type = \"\"\nif (generated_value < 10){\n    temperature_type = \"Low\"\n}else{\n    if(generated_value >= 30){\n        temperature_type = \"High\"\n    }else{\n        temperature_type = \"Normal\"\n    }\n}\nmsg.payload.value = generated_value\nmsg.payload.extra_info = {\n    \"unit\": \"Celsius\",\n    \"temperature_type\": temperature_type,\n}\nmsg.payload.sensor = \"thermostat\"\nmsg.topic = \"/ioto/only-personal/thermostat/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1260,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "6a677a973d743ddd",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for air quallity - OnlyPersonal",
        "func": "function simulateAirQuality(baseAQI, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return Math.max(0, (baseAQI + fluctuation).toFixed(2)); // Ensure AQI doesn't go below 0\n}\nconst baseAQI = 50; // Air quality index\nconst aqiFluctuation = 20;\n\n//let infrared_value =  Math.floor(Math.random() * 120)+1;\nlet infrared_value = simulateAirQuality(baseAQI, aqiFluctuation);\n\nmsg.payload = {}\nmsg.payload.sensor = \"infrared\"\nmsg.payload.extra_info = {}\nif (infrared_value > 100){\n    msg.payload.extra_info.ica = \"Dangerous for sensible groups\"\n}else{\n    if (infrared_value >50){\n        msg.payload.extra_info.ica = \"Moderate\"\n    }else{\n        msg.payload.extra_info.ica = \"Good\"\n    }\n}\nmsg.payload.value = infrared_value\nmsg.topic = \"/ioto/only-personal/infrared/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1300,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "a902f1bbaccdac07",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for smoke_detector - OnlyPersonal",
        "func": "msg.payload = {}\n\nlet generated_value = Math.floor(Math.random() * 2)+1;\nlet possible_values = [\"Yes\", \"No\"]\nmsg.payload.value = possible_values[generated_value-1]\nmsg.payload.sensor = \"smoke_detector\"\nmsg.topic = \"/ioto/only-personal/smoke/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1420,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "84b9dbb59a700dbc",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for noise - OnlyPersonal",
        "func": "msg.payload = {}\n\nfunction simulateNoise(baseDb, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return Math.max(0, (baseDb + fluctuation).toFixed(2)); // Ensure dB doesn't go below 0\n}\nconst baseDb = 40; // Noise level in decibels\nconst dbFluctuation = 10;   \n\nlet sound_value =  simulateNoise(baseDb, dbFluctuation);\nmsg.payload.value = sound_value\nmsg.payload.sensor = \"noise_detector\"\nmsg.topic = \"/ioto/only-personal/noise/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1460,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "6840d92d02b01572",
        "type": "function",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "random number for illumination - onlyPersonal",
        "func": "function simulateIllumination(baseLux, fluctuationRange) {\n    const fluctuation = (Math.random() - 0.5) * fluctuationRange * 2; // Random fluctuation\n    return Math.max(0, (baseLux + fluctuation).toFixed(2)); // Ensure lux doesn't go below 0\n}\n\nconst baseLux = 400; // Illumination in lux\nconst luxFluctuation = 100;\n\nlet lux_value = simulateIllumination(baseLux, luxFluctuation);\n\nmsg.payload = {}\nmsg.payload.sensor = \"light_meter\"\nmsg.payload.extra_info = {}\nmsg.payload.extra_info.unit = \"lux\"\nif (lux_value > 300){\n    msg.payload.extra_info.room_ilumination = \"High\"\n}else{\n    if (lux_value >100){\n        msg.payload.extra_info.room_ilumination = \"Medium\"\n    }else{\n        msg.payload.extra_info.room_ilumination = \"Low\"\n    }\n}\nmsg.payload.value = lux_value\nmsg.topic = \"/ioto/only-personal/illumination/updated\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1360,
        "wires": [
            [
                "bdbdbd680b6e99a1"
            ]
        ]
    },
    {
        "id": "8fbd5a90a59d5457",
        "type": "debug",
        "z": "bc7c2dbf3c7d4ad5",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "params",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 260,
        "wires": []
    },
    {
        "id": "d619712a3f56fee3",
        "type": "http request",
        "z": "b28ad62b928d3d7e",
        "name": "POST add observation",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/observations",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 520,
        "wires": [
            [
                "9d9759d977744e74"
            ]
        ]
    },
    {
        "id": "27b43d893ba8a1e2",
        "type": "mqtt out",
        "z": "b28ad62b928d3d7e",
        "name": "",
        "topic": "/api_response",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "50a396fd667d69c0",
        "x": 880,
        "y": 400,
        "wires": []
    },
    {
        "id": "2d6dbd465a99c7ab",
        "type": "http request",
        "z": "b28ad62b928d3d7e",
        "name": "GET environment conditions",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/env_current_state?method=web",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 600,
        "wires": [
            [
                "9d9759d977744e74"
            ]
        ]
    },
    {
        "id": "ccc977f3dc0d4925",
        "type": "inject",
        "z": "b28ad62b928d3d7e",
        "name": "GET env status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 160,
        "y": 600,
        "wires": [
            [
                "2d6dbd465a99c7ab"
            ]
        ]
    },
    {
        "id": "1ead786fc7a554cd",
        "type": "http request",
        "z": "b28ad62b928d3d7e",
        "name": "GET sensors",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/sensors",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 300,
        "wires": [
            [
                "27b43d893ba8a1e2"
            ]
        ]
    },
    {
        "id": "c55a165ad40d021d",
        "type": "inject",
        "z": "b28ad62b928d3d7e",
        "name": "GO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "1ead786fc7a554cd"
            ]
        ]
    },
    {
        "id": "9851e7301cae094c",
        "type": "inject",
        "z": "b28ad62b928d3d7e",
        "name": "SEND API request",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "52ede7bb4ac636e8"
            ]
        ]
    },
    {
        "id": "52ede7bb4ac636e8",
        "type": "http request",
        "z": "b28ad62b928d3d7e",
        "name": "GET count_visitors",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/count_visitors",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 360,
        "wires": [
            [
                "27b43d893ba8a1e2"
            ]
        ]
    },
    {
        "id": "40643f707feb6e78",
        "type": "debug",
        "z": "b28ad62b928d3d7e",
        "name": "API response.payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 760,
        "wires": []
    },
    {
        "id": "c18005cf8b2c68d6",
        "type": "inject",
        "z": "b28ad62b928d3d7e",
        "name": "SEND API request",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 210,
        "y": 760,
        "wires": [
            [
                "5f51999cc98a0e5f"
            ]
        ]
    },
    {
        "id": "5f51999cc98a0e5f",
        "type": "http request",
        "z": "b28ad62b928d3d7e",
        "name": "GET list_visitors",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/list_visitors",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 760,
        "wires": [
            [
                "9d9759d977744e74"
            ]
        ]
    },
    {
        "id": "9d9759d977744e74",
        "type": "mqtt out",
        "z": "b28ad62b928d3d7e",
        "name": "",
        "topic": "/api_response",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "50a396fd667d69c0",
        "x": 760,
        "y": 760,
        "wires": []
    },
    {
        "id": "6b549b85028cc7f3",
        "type": "mqtt in",
        "z": "b28ad62b928d3d7e",
        "name": "",
        "topic": "/api_response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1170,
        "y": 700,
        "wires": [
            [
                "40643f707feb6e78"
            ]
        ]
    },
    {
        "id": "28b6b5bbef2ca1dc",
        "type": "comment",
        "z": "b28ad62b928d3d7e",
        "name": "TODO: change topics to something more specific",
        "info": "",
        "x": 1140,
        "y": 800,
        "wires": []
    },
    {
        "id": "6bcabe0833934ff7",
        "type": "http request",
        "z": "b28ad62b928d3d7e",
        "name": "POST add visitor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/visitors",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 240,
        "wires": [
            [
                "27b43d893ba8a1e2"
            ]
        ]
    },
    {
        "id": "ce54fb612ad1e9e1",
        "type": "mqtt in",
        "z": "b28ad62b928d3d7e",
        "name": "",
        "topic": "/ioto/visitors/new",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 240,
        "wires": [
            [
                "6bcabe0833934ff7"
            ]
        ]
    },
    {
        "id": "a9dc191dba289ded",
        "type": "http request",
        "z": "b28ad62b928d3d7e",
        "name": "POST add sensor",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/sensors",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 100,
        "wires": [
            [
                "27b43d893ba8a1e2"
            ]
        ]
    },
    {
        "id": "5afd63b5327063dc",
        "type": "function",
        "z": "b28ad62b928d3d7e",
        "name": "Declare Sensors",
        "func": "msg.payload = {\n    \"sensors\": [\n        {\n            \"device_name\": \"SmartThermostat\",\n            \"device_type\": \"ModernDevice\",\n            \"sensor_name\": \"tempSensor01\",\n            \"measure\": \"temperature\",\n            \"data_format\": \"JSON\",\n            \"room\": \"exhibition1\",\n            \"protocol\": \"CoAP\",\n            \"iot_standard\": \"OneM2M\",\n            \"threshold\": \"20.00\"\n        },\n        {\n            \"device_name\": \"SmartAirQuality\",\n            \"device_type\": \"ModernDevice\",\n            \"sensor_name\": \"airQualitySensor01\",\n            \"measure\": \"air_quality\",\n            \"data_format\": \"JSON\",\n            \"room\": \"exhibition1\",\n            \"protocol\": \"CoAP\",\n            \"iot_standard\": \"OneM2M\",\n            \"threshold\": \"100.00\"\n        },\n        {\n            \"device_name\": \"LightSensor\",\n            \"device_type\": \"ModernDevice\",\n            \"sensor_name\": \"illuminationSensor01\",\n            \"measure\": \"illumination\",\n            \"data_format\": \"JSON\",\n            \"room\": \"exhibition1\",\n            \"protocol\": \"Zigbee\",\n            \"iot_standard\": \"LwM2M\",\n            \"threshold\": \"300.00\"\n        },\n        {\n            \"device_name\": \"NoiseDetector\",\n            \"device_type\": \"ModernDevice\",\n            \"sensor_name\": \"noiseSensor01\",\n            \"measure\": \"noise\",\n            \"data_format\": \"JSON\",\n            \"room\": \"exhibition1\",\n            \"protocol\": \"LoRaWAN\",\n            \"iot_standard\": \"FIWARE\",\n            \"threshold\": \"70.00\"\n        },\n        {\n            \"device_name\": \"SmokeDetector\",\n            \"device_type\": \"LegacyDevice\",\n            \"sensor_name\": \"smokeSensor01\",\n            \"measure\": \"smoke\",\n            \"data_format\": \"XML\",\n            \"room\": \"exhibition1\",\n            \"protocol\": \"Bluetooth\",\n            \"iot_standard\": \"EclipseDitto\",\n            \"threshold\": \"1.00\"\n        }\n    ]\n};\n\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "a9dc191dba289ded"
            ]
        ]
    },
    {
        "id": "771f52a006f25fd3",
        "type": "http request",
        "z": "b28ad62b928d3d7e",
        "name": "GET observations",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/observations",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 700,
        "wires": [
            [
                "9d9759d977744e74"
            ]
        ]
    },
    {
        "id": "323c0886bb5d7ece",
        "type": "inject",
        "z": "b28ad62b928d3d7e",
        "name": "GO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 150,
        "y": 700,
        "wires": [
            [
                "771f52a006f25fd3"
            ]
        ]
    },
    {
        "id": "e23a27259e4e5ef8",
        "type": "http request",
        "z": "b28ad62b928d3d7e",
        "name": "GET ontology",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:5000/get_ontology",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "27b43d893ba8a1e2"
            ]
        ]
    },
    {
        "id": "5393b4ccc1a44456",
        "type": "inject",
        "z": "b28ad62b928d3d7e",
        "name": "GO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "5afd63b5327063dc"
            ]
        ]
    },
    {
        "id": "43a10870d00ae751",
        "type": "inject",
        "z": "b28ad62b928d3d7e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "e23a27259e4e5ef8"
            ]
        ]
    },
    {
        "id": "562da5ee35556ec0",
        "type": "mqtt in",
        "z": "b28ad62b928d3d7e",
        "name": "",
        "topic": "/ioto/sensors1/thermostat/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 440,
        "wires": [
            [
                "a268f41e8840dd62",
                "d619712a3f56fee3"
            ]
        ]
    },
    {
        "id": "a268f41e8840dd62",
        "type": "debug",
        "z": "b28ad62b928d3d7e",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 440,
        "wires": []
    },
    {
        "id": "e290e2f2b0e5494a",
        "type": "ui_switch",
        "z": "b6742ae437b1a3ca",
        "name": "",
        "label": "START NodeRED Simulation",
        "tooltip": "",
        "group": "a8dcf1e718e6bbca",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 440,
        "y": 60,
        "wires": [
            [
                "82cf5d7de767e9a0"
            ]
        ]
    },
    {
        "id": "5b8f2e6d34793ab3",
        "type": "mqtt out",
        "z": "b6742ae437b1a3ca",
        "name": "",
        "topic": "noder_red/sensors",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "50a396fd667d69c0",
        "x": 930,
        "y": 60,
        "wires": []
    },
    {
        "id": "82cf5d7de767e9a0",
        "type": "function",
        "z": "b6742ae437b1a3ca",
        "name": "forward msg",
        "func": "if(msg.payload === false){\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 60,
        "wires": [
            [
                "5b8f2e6d34793ab3"
            ]
        ]
    },
    {
        "id": "e1a0efa1e74b906c",
        "type": "inject",
        "z": "b6742ae437b1a3ca",
        "name": "each 10 seconds",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "e290e2f2b0e5494a"
            ]
        ]
    },
    {
        "id": "289a76580eca34a6",
        "type": "ui_chart",
        "z": "b6742ae437b1a3ca",
        "name": "",
        "group": "a8dcf1e718e6bbca",
        "order": 4,
        "width": 6,
        "height": 4,
        "label": "Consent vs Not Consent",
        "chartType": "pie",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Not data available",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "50",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 770,
        "y": 400,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-adjust"
    },
    {
        "id": "d5299f98e33f9763",
        "type": "function",
        "z": "b6742ae437b1a3ca",
        "name": "function 6",
        "func": "msg.payload=global.get(\"visitorsConsent\")\nmsg.topic = \"visitorsConsent\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 380,
        "wires": [
            [
                "289a76580eca34a6"
            ]
        ]
    },
    {
        "id": "9a043c1762bf3cd3",
        "type": "function",
        "z": "b6742ae437b1a3ca",
        "name": "function 7",
        "func": "msg.payload=global.get(\"visitorsNotConsent\")\nmsg.topic = \"visitorsNotConsent\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 420,
        "wires": [
            [
                "289a76580eca34a6"
            ]
        ]
    },
    {
        "id": "b0c6816fec267f39",
        "type": "mqtt in",
        "z": "b6742ae437b1a3ca",
        "name": "",
        "topic": "/ioto/visitors/new",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 380,
        "wires": [
            [
                "d5299f98e33f9763",
                "9a043c1762bf3cd3",
                "184885e298a80426",
                "702852734559c9d4"
            ]
        ]
    },
    {
        "id": "184885e298a80426",
        "type": "function",
        "z": "b6742ae437b1a3ca",
        "name": "Get Visitors by Exhibitions",
        "func": "let exhibitions = [\n    { name: \"Exhibition 1\", key: \"countExhibition1\" },\n    { name: \"Exhibition 2\", key: \"countExhibition2\" },\n    { name: \"Exhibition 3\", key: \"countExhibition3\" },\n    { name: \"OnlyPersonal\", key: \"countOnlyPersonal\" } // Custom key for this one\n];\n\nlet messages = exhibitions.map(exhibition => ({\n    payload: global.get(exhibition.key) || 0,\n    topic: exhibition.name\n}));\n\nreturn messages;",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 540,
        "wires": [
            [
                "5708f1f253c661aa"
            ],
            [
                "5708f1f253c661aa"
            ],
            [
                "5708f1f253c661aa"
            ],
            [
                "5708f1f253c661aa"
            ]
        ]
    },
    {
        "id": "5708f1f253c661aa",
        "type": "ui_chart",
        "z": "b6742ae437b1a3ca",
        "name": "",
        "group": "a8dcf1e718e6bbca",
        "order": 5,
        "width": 6,
        "height": 4,
        "label": "People in Exhibitions",
        "chartType": "pie",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "no visitors registered",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "50",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "2b87badbc9456b80",
        "type": "ui_text",
        "z": "b6742ae437b1a3ca",
        "group": "a8dcf1e718e6bbca",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "People in museum",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 320,
        "wires": []
    },
    {
        "id": "702852734559c9d4",
        "type": "function",
        "z": "b6742ae437b1a3ca",
        "name": "function 8",
        "func": "msg.payload=global.get(\"visitors\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 320,
        "wires": [
            [
                "2b87badbc9456b80",
                "52c56fd1449623a4"
            ]
        ]
    },
    {
        "id": "a13d5972b2976ba5",
        "type": "inject",
        "z": "b6742ae437b1a3ca",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 540,
        "wires": [
            [
                "184885e298a80426"
            ]
        ]
    },
    {
        "id": "52c56fd1449623a4",
        "type": "debug",
        "z": "b6742ae437b1a3ca",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 220,
        "wires": []
    },
    {
        "id": "c6bdb7ddd61d1c8c",
        "type": "mqtt out",
        "z": "b6742ae437b1a3ca",
        "name": "",
        "topic": "noder_red/visitors",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "50a396fd667d69c0",
        "x": 910,
        "y": 120,
        "wires": []
    },
    {
        "id": "01ac16d7d66b214d",
        "type": "ui_switch",
        "z": "b6742ae437b1a3ca",
        "name": "",
        "label": "OPEN Museum to visitors",
        "tooltip": "",
        "group": "a8dcf1e718e6bbca",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 410,
        "y": 120,
        "wires": [
            [
                "3703bb7a4b09e6d3"
            ]
        ]
    },
    {
        "id": "3703bb7a4b09e6d3",
        "type": "function",
        "z": "b6742ae437b1a3ca",
        "name": "forward msg",
        "func": "if(msg.payload === false){\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 120,
        "wires": [
            [
                "c6bdb7ddd61d1c8c"
            ]
        ]
    },
    {
        "id": "787ca4849304089b",
        "type": "inject",
        "z": "b6742ae437b1a3ca",
        "name": "each 3 seconds",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "01ac16d7d66b214d"
            ]
        ]
    },
    {
        "id": "26e809a18fdf30b9",
        "type": "mqtt in",
        "z": "b6742ae437b1a3ca",
        "name": "",
        "topic": "/ioto/visitors/access_event",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 1220,
        "wires": [
            [
                "f905ab1f74ead7ab"
            ]
        ]
    },
    {
        "id": "f905ab1f74ead7ab",
        "type": "function",
        "z": "b6742ae437b1a3ca",
        "name": "function 18",
        "func": "msg.payload = msg.payload.value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1220,
        "wires": [
            [
                "b31aa2a06c11c7cb"
            ]
        ]
    },
    {
        "id": "6440b574f3a2ec83",
        "type": "ui_toast",
        "z": "b6742ae437b1a3ca",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notification",
        "x": 850,
        "y": 1220,
        "wires": []
    },
    {
        "id": "b31aa2a06c11c7cb",
        "type": "template",
        "z": "b6742ae437b1a3ca",
        "name": "Bad entry",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: Entry detected\nValue: {{payload}}\nRoom: OnlyPersonal\n",
        "output": "str",
        "x": 620,
        "y": 1220,
        "wires": [
            [
                "6440b574f3a2ec83"
            ]
        ]
    },
    {
        "id": "bf03bf5cfa57d848",
        "type": "ui_chart",
        "z": "b6742ae437b1a3ca",
        "name": "",
        "group": "fc31d257cb0944f2",
        "order": 8,
        "width": 0,
        "height": 0,
        "label": "Value Distribution",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No info available",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 770,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "77eef4da27531924",
        "type": "function",
        "z": "b6742ae437b1a3ca",
        "name": "Paints in Exhibition1",
        "func": "var msgMV = {};\nvar msgSV = {};\nvar msgN = {};\n\nmsgMV.payload= global.get(\"paintsExhibition1.money_valuable\")\nmsgMV.topic = \"Money Valuable\"\nmsgSV.payload= global.get(\"paintsExhibition1.source_valuable\")\nmsgSV.topic = \"Source Valuable\"\nmsgN.payload= global.get(\"paintsExhibition1.normal\")\nmsgN.topic = \"Normal\"\n\nreturn [msgMV, msgSV, msgN];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 740,
        "wires": [
            [
                "bf03bf5cfa57d848"
            ],
            [
                "bf03bf5cfa57d848"
            ],
            [
                "bf03bf5cfa57d848"
            ]
        ]
    },
    {
        "id": "9f957b2cc4336ba9",
        "type": "ui_chart",
        "z": "b6742ae437b1a3ca",
        "name": "",
        "group": "e78f4a2ba5c5ef8b",
        "order": 8,
        "width": 0,
        "height": 0,
        "label": "Value Distribution",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No info available",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 770,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "2ca69e8e992c38ae",
        "type": "function",
        "z": "b6742ae437b1a3ca",
        "name": "Paints in Exhibition 2",
        "func": "var msgMV = {};\nvar msgSV = {};\nvar msgN = {};\n\nmsgMV.payload= global.get(\"paintsExhibition2.money_valuable\")\nmsgMV.topic = \"Money Valuable\"\nmsgSV.payload= global.get(\"paintsExhibition2.source_valuable\")\nmsgSV.topic = \"Source Valuable\"\nmsgN.payload= global.get(\"paintsExhibition2.normal\")\nmsgN.topic = \"Normal\"\n\nreturn [msgMV, msgSV, msgN];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 820,
        "wires": [
            [
                "9f957b2cc4336ba9"
            ],
            [
                "9f957b2cc4336ba9"
            ],
            [
                "9f957b2cc4336ba9"
            ]
        ]
    },
    {
        "id": "8fa0565129a12c3c",
        "type": "ui_chart",
        "z": "b6742ae437b1a3ca",
        "name": "",
        "group": "ab40b36f9d624cad",
        "order": 8,
        "width": 0,
        "height": 0,
        "label": "Value Distribution",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "no info avilable",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 770,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "9ef4f2cb75f35a76",
        "type": "function",
        "z": "b6742ae437b1a3ca",
        "name": "Paints in Exhibition 3",
        "func": "var msgMV = {};\nvar msgSV = {};\nvar msgN = {};\n\nmsgMV.payload= global.get(\"paintsExhibition3.money_valuable\")\nmsgMV.topic = \"Money Valuable\"\nmsgSV.payload= global.get(\"paintsExhibition3.source_valuable\")\nmsgSV.topic = \"Source Valuable\"\nmsgN.payload= global.get(\"paintsExhibition3.normal\")\nmsgN.topic = \"Normal\"\n\nreturn [msgMV, msgSV, msgN];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 900,
        "wires": [
            [
                "8fa0565129a12c3c"
            ],
            [
                "8fa0565129a12c3c"
            ],
            [
                "8fa0565129a12c3c"
            ]
        ]
    },
    {
        "id": "ae70d9efe4fe050a",
        "type": "ui_chart",
        "z": "b6742ae437b1a3ca",
        "name": "",
        "group": "9de5fce48495669b",
        "order": 8,
        "width": 0,
        "height": 0,
        "label": "Value Distribution",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No info available",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 770,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "79c7876dd3344494",
        "type": "function",
        "z": "b6742ae437b1a3ca",
        "name": "paintsOnlyPersonal",
        "func": "var msgMV = {};\nvar msgSV = {};\nvar msgN = {};\n\nmsgMV.payload= global.get(\"paintsOnlyPersonal.money_valuable\")\nmsgMV.topic = \"Money Valuable\"\nmsgSV.payload= global.get(\"paintsOnlyPersonal.source_valuable\")\nmsgSV.topic = \"Source Valuable\"\nmsgN.payload= global.get(\"paintsOnlyPersonal.normal\")\nmsgN.topic = \"Normal\"\n\nreturn [msgMV, msgSV, msgN];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 660,
        "wires": [
            [
                "ae70d9efe4fe050a"
            ],
            [
                "ae70d9efe4fe050a"
            ],
            [
                "ae70d9efe4fe050a"
            ]
        ]
    },
    {
        "id": "e646f1039a64135e",
        "type": "mqtt in",
        "z": "b6742ae437b1a3ca",
        "name": "",
        "topic": "noder_red/sensors",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 780,
        "wires": [
            [
                "79c7876dd3344494",
                "77eef4da27531924",
                "2ca69e8e992c38ae",
                "9ef4f2cb75f35a76"
            ]
        ]
    },
    {
        "id": "8dde7f964f2e8f35",
        "type": "ui_gauge",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "fc31d257cb0944f2",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Temperature Gauge",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "15",
        "seg2": "30",
        "diff": false,
        "className": "",
        "x": 640,
        "y": 60,
        "wires": []
    },
    {
        "id": "3e12869931096bb6",
        "type": "ui_chart",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "fc31d257cb0944f2",
        "order": 2,
        "width": 6,
        "height": 4,
        "label": "Temperature over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "60",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 700,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "8239f46ea63423ec",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors1/thermostat/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 180,
        "wires": [
            [
                "dcdc80432ba51dc2",
                "4d713910577628ce"
            ]
        ]
    },
    {
        "id": "15b180ab7cc66745",
        "type": "switch",
        "z": "937b4e5e178a38d6",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "30",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "4fd7ca0d3ac0c80c"
            ]
        ]
    },
    {
        "id": "6bebd5a7e8393262",
        "type": "ui_toast",
        "z": "937b4e5e178a38d6",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notification",
        "x": 1050,
        "y": 180,
        "wires": []
    },
    {
        "id": "4fd7ca0d3ac0c80c",
        "type": "template",
        "z": "937b4e5e178a38d6",
        "name": "Alert msg",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: high temperature detected of {{payload}} C !",
        "output": "str",
        "x": 860,
        "y": 180,
        "wires": [
            [
                "6bebd5a7e8393262"
            ]
        ]
    },
    {
        "id": "dcdc80432ba51dc2",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 3,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Temperature",
        "format": "{{msg.payload.evaluation}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 470,
        "y": 240,
        "wires": []
    },
    {
        "id": "4d713910577628ce",
        "type": "function",
        "z": "937b4e5e178a38d6",
        "name": "getValueTemperature",
        "func": "msg.payload = msg.payload.value\n// global.get(\"currentTemp\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "8dde7f964f2e8f35",
                "3e12869931096bb6",
                "15b180ab7cc66745"
            ]
        ]
    },
    {
        "id": "281eb0518df4f7d6",
        "type": "ui_gauge",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "fc31d257cb0944f2",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Air Quallity (Co2)",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "120",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "50",
        "seg2": "100",
        "diff": false,
        "className": "",
        "x": 690,
        "y": 320,
        "wires": []
    },
    {
        "id": "01b9c8b2c0b0ebd4",
        "type": "ui_chart",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "fc31d257cb0944f2",
        "order": 4,
        "width": 6,
        "height": 4,
        "label": "infrared over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "140",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 690,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "2dcd87831107d958",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors1/infrared/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 320,
        "wires": [
            [
                "122fb15c56121a9f",
                "569feae0783d4c35"
            ]
        ]
    },
    {
        "id": "122fb15c56121a9f",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 5,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "ICA Category",
        "format": "{{msg.payload.extra_info.ica}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 470,
        "y": 380,
        "wires": []
    },
    {
        "id": "569feae0783d4c35",
        "type": "function",
        "z": "937b4e5e178a38d6",
        "name": "function 4",
        "func": "msg.payload = msg.payload.value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 320,
        "wires": [
            [
                "281eb0518df4f7d6",
                "01b9c8b2c0b0ebd4"
            ]
        ]
    },
    {
        "id": "f70333b0886d31c6",
        "type": "ui_gauge",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "fc31d257cb0944f2",
        "order": 5,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Illumination",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "600",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "50",
        "seg2": "300",
        "diff": false,
        "className": "",
        "x": 670,
        "y": 460,
        "wires": []
    },
    {
        "id": "06b10649d667329d",
        "type": "ui_chart",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "fc31d257cb0944f2",
        "order": 6,
        "width": 6,
        "height": 4,
        "label": "Illumination over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "600",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 700,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "9f5d9da64fe03408",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors1/illumination/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 460,
        "wires": [
            [
                "aa5ff0e416bd3354",
                "c9e924f444d85643"
            ]
        ]
    },
    {
        "id": "aa5ff0e416bd3354",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 4,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Room Ilumination",
        "format": "{{msg.payload.extra_info.room_ilumination}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 470,
        "y": 540,
        "wires": []
    },
    {
        "id": "c9e924f444d85643",
        "type": "function",
        "z": "937b4e5e178a38d6",
        "name": "function 5",
        "func": "msg.payload = msg.payload.value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 460,
        "wires": [
            [
                "f70333b0886d31c6",
                "06b10649d667329d"
            ]
        ]
    },
    {
        "id": "3f405d67d3e31fc7",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors1/smoke/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 640,
        "wires": [
            [
                "2839df7ede8e785c"
            ]
        ]
    },
    {
        "id": "2839df7ede8e785c",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 6,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Smoke detected",
        "format": "{{msg.payload.value}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 460,
        "y": 640,
        "wires": []
    },
    {
        "id": "e89c13aea0dff91f",
        "type": "ui_gauge",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "e78f4a2ba5c5ef8b",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Temperature",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "15",
        "seg2": "30",
        "diff": false,
        "className": "",
        "x": 670,
        "y": 880,
        "wires": []
    },
    {
        "id": "7353e2b9e617c899",
        "type": "ui_chart",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "e78f4a2ba5c5ef8b",
        "order": 2,
        "width": 6,
        "height": 4,
        "label": "Temperature over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "60",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 700,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "7bc703835b38b3ed",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors2/thermostat/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 980,
        "wires": [
            [
                "a6ecaea057de6e6b",
                "f543c56f7a7c46da"
            ]
        ]
    },
    {
        "id": "d951aa33ad125ec9",
        "type": "switch",
        "z": "937b4e5e178a38d6",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "30",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 980,
        "wires": [
            [
                "1d42cae9cf57e75f"
            ]
        ]
    },
    {
        "id": "446bc9707b6330d2",
        "type": "ui_toast",
        "z": "937b4e5e178a38d6",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notification",
        "x": 1050,
        "y": 980,
        "wires": []
    },
    {
        "id": "1d42cae9cf57e75f",
        "type": "template",
        "z": "937b4e5e178a38d6",
        "name": "Alert msg",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: high temperature detected of {{payload}} C !",
        "output": "str",
        "x": 860,
        "y": 980,
        "wires": [
            [
                "446bc9707b6330d2"
            ]
        ]
    },
    {
        "id": "a6ecaea057de6e6b",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 10,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Temperature",
        "format": "{{msg.payload.extra_info.temperature_type}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#1685ca",
        "x": 470,
        "y": 1060,
        "wires": []
    },
    {
        "id": "f543c56f7a7c46da",
        "type": "function",
        "z": "937b4e5e178a38d6",
        "name": "function 9",
        "func": "msg.payload = msg.payload.value\n// global.get(\"currentTemp\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 980,
        "wires": [
            [
                "e89c13aea0dff91f",
                "7353e2b9e617c899",
                "d951aa33ad125ec9"
            ]
        ]
    },
    {
        "id": "96e084c33f08e8fc",
        "type": "ui_gauge",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "e78f4a2ba5c5ef8b",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Air Quallity (Co2)",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "120",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "50",
        "seg2": "100",
        "diff": false,
        "className": "",
        "x": 690,
        "y": 1100,
        "wires": []
    },
    {
        "id": "cd5c05d5f77e3d76",
        "type": "ui_chart",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "e78f4a2ba5c5ef8b",
        "order": 4,
        "width": 6,
        "height": 4,
        "label": "infrared over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "140",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 690,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "41a539295a6247ef",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors2/infrared/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 1160,
        "wires": [
            [
                "2b8480d6a43dbaf7",
                "2816d64cf75f84b2"
            ]
        ]
    },
    {
        "id": "2b8480d6a43dbaf7",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 12,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "ICA Category",
        "format": "{{msg.payload.extra_info.ica}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#0e94cd",
        "x": 470,
        "y": 1240,
        "wires": []
    },
    {
        "id": "2816d64cf75f84b2",
        "type": "function",
        "z": "937b4e5e178a38d6",
        "name": "function 10",
        "func": "msg.payload = msg.payload.value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1160,
        "wires": [
            [
                "96e084c33f08e8fc",
                "cd5c05d5f77e3d76"
            ]
        ]
    },
    {
        "id": "a4278bd97ef71308",
        "type": "ui_gauge",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "e78f4a2ba5c5ef8b",
        "order": 5,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Illumination",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "600",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "50",
        "seg2": "300",
        "diff": false,
        "className": "",
        "x": 670,
        "y": 1280,
        "wires": []
    },
    {
        "id": "7b2167a51eb2c52d",
        "type": "ui_chart",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "e78f4a2ba5c5ef8b",
        "order": 6,
        "width": 6,
        "height": 4,
        "label": "Illumination over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "600",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 700,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "fce47549d742975e",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors2/illumination/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1340,
        "wires": [
            [
                "78f02ff271f5aed0",
                "6b76102994333db0"
            ]
        ]
    },
    {
        "id": "78f02ff271f5aed0",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 11,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Room Ilumination",
        "format": "{{msg.payload.extra_info.room_ilumination}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#279ad3",
        "x": 490,
        "y": 1420,
        "wires": []
    },
    {
        "id": "6b76102994333db0",
        "type": "function",
        "z": "937b4e5e178a38d6",
        "name": "function 11",
        "func": "msg.payload = msg.payload.value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1340,
        "wires": [
            [
                "a4278bd97ef71308",
                "7b2167a51eb2c52d"
            ]
        ]
    },
    {
        "id": "8e9af38cb19063be",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors2/smoke/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1500,
        "wires": [
            [
                "0c8b8b4de36e9865"
            ]
        ]
    },
    {
        "id": "0c8b8b4de36e9865",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 13,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Smoke detected",
        "format": "{{msg.payload.value}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#1984d7",
        "x": 480,
        "y": 1500,
        "wires": []
    },
    {
        "id": "8755bdc94024b7f9",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 8,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Exhibition 2: Summary",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#518ddb",
        "x": 160,
        "y": 920,
        "wires": []
    },
    {
        "id": "a9433d46f7502b77",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors1/noise/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 720,
        "wires": [
            [
                "1cc94bfcb8b522dd"
            ]
        ]
    },
    {
        "id": "4ab02fb2b0001f3b",
        "type": "ui_gauge",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "fc31d257cb0944f2",
        "order": 7,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Noise",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "150",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "50",
        "seg2": "100",
        "diff": false,
        "className": "",
        "x": 730,
        "y": 700,
        "wires": []
    },
    {
        "id": "074985537dd05bee",
        "type": "ui_chart",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "fc31d257cb0944f2",
        "order": 8,
        "width": 6,
        "height": 4,
        "label": "Noise over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "150",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 760,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "1cc94bfcb8b522dd",
        "type": "function",
        "z": "937b4e5e178a38d6",
        "name": "function 12",
        "func": "msg.payload = msg.payload.value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 720,
        "wires": [
            [
                "4ab02fb2b0001f3b",
                "074985537dd05bee",
                "a32cfcc002b7e648"
            ]
        ]
    },
    {
        "id": "a32cfcc002b7e648",
        "type": "switch",
        "z": "937b4e5e178a38d6",
        "name": "Checking sound noise",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "130",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "70",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "50",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 760,
        "y": 800,
        "wires": [
            [
                "ad2a1921f0e1b566"
            ],
            [
                "f224d34263069de1"
            ],
            [
                "5848fc00d4c3d841"
            ]
        ]
    },
    {
        "id": "30e6097d808ab259",
        "type": "ui_toast",
        "z": "937b4e5e178a38d6",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notification",
        "x": 1230,
        "y": 780,
        "wires": []
    },
    {
        "id": "f224d34263069de1",
        "type": "template",
        "z": "937b4e5e178a38d6",
        "name": "High noise",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: Noise detected\nValue: {{payload}} dec.\nMost likely:  Anormal high noise\nExhibition: 1",
        "output": "str",
        "x": 1010,
        "y": 760,
        "wires": [
            [
                "30e6097d808ab259"
            ]
        ]
    },
    {
        "id": "ad2a1921f0e1b566",
        "type": "template",
        "z": "937b4e5e178a38d6",
        "name": "Close to pain  limit 1",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: Noise detected\nValue: {{payload}} dec.\nMost likely: danger for visitors\nExhibition: 1\n",
        "output": "str",
        "x": 1030,
        "y": 720,
        "wires": [
            [
                "30e6097d808ab259"
            ]
        ]
    },
    {
        "id": "5848fc00d4c3d841",
        "type": "template",
        "z": "937b4e5e178a38d6",
        "name": "Crowded exhibition",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: Noise detected\nValue: {{payload}} dec.\nMost likely: Crowded exhibition\nExhibition: 1",
        "output": "str",
        "x": 1030,
        "y": 800,
        "wires": [
            [
                "30e6097d808ab259"
            ]
        ]
    },
    {
        "id": "33989ef578ec8e34",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors2/noise/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 1620,
        "wires": [
            [
                "8615a0d60f487135"
            ]
        ]
    },
    {
        "id": "3d9c93863600e21b",
        "type": "ui_gauge",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "e78f4a2ba5c5ef8b",
        "order": 7,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Noise",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "150",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "50",
        "seg2": "100",
        "diff": false,
        "className": "",
        "x": 730,
        "y": 1600,
        "wires": []
    },
    {
        "id": "782afb2e94724ca4",
        "type": "ui_chart",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "e78f4a2ba5c5ef8b",
        "order": 8,
        "width": 6,
        "height": 4,
        "label": "Noise over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "150",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 760,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "8615a0d60f487135",
        "type": "function",
        "z": "937b4e5e178a38d6",
        "name": "function 13",
        "func": "msg.payload = msg.payload.value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1620,
        "wires": [
            [
                "3d9c93863600e21b",
                "782afb2e94724ca4",
                "0d536a067d85277e"
            ]
        ]
    },
    {
        "id": "0d536a067d85277e",
        "type": "switch",
        "z": "937b4e5e178a38d6",
        "name": "Checking sound noise",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "130",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "70",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "50",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 760,
        "y": 1700,
        "wires": [
            [
                "a6d53d12cebdf2b5"
            ],
            [
                "1c80717816660c4d"
            ],
            [
                "dab020343793514d"
            ]
        ]
    },
    {
        "id": "38f2fb999119dcfb",
        "type": "ui_toast",
        "z": "937b4e5e178a38d6",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notification",
        "x": 1230,
        "y": 1680,
        "wires": []
    },
    {
        "id": "1c80717816660c4d",
        "type": "template",
        "z": "937b4e5e178a38d6",
        "name": "High noise",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: Noise detected\nValue: {{payload}} dec.\nMost likely:  Anormal high noise\nExhibition: 2",
        "output": "str",
        "x": 1010,
        "y": 1660,
        "wires": [
            [
                "38f2fb999119dcfb"
            ]
        ]
    },
    {
        "id": "a6d53d12cebdf2b5",
        "type": "template",
        "z": "937b4e5e178a38d6",
        "name": "Close to pain  limit 2",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: Noise detected\nValue: {{payload}} dec.\nMost likely: danger for visitors\nExhibition: 2\n",
        "output": "str",
        "x": 1030,
        "y": 1620,
        "wires": [
            [
                "38f2fb999119dcfb"
            ]
        ]
    },
    {
        "id": "dab020343793514d",
        "type": "template",
        "z": "937b4e5e178a38d6",
        "name": "Crowded exhibition",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: Noise detected\nValue: {{payload}} dec.\nMost likely: Crowded exhibition\nExhibition: 2",
        "output": "str",
        "x": 1030,
        "y": 1700,
        "wires": [
            [
                "38f2fb999119dcfb"
            ]
        ]
    },
    {
        "id": "3db9d20fe378c1be",
        "type": "ui_gauge",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "ab40b36f9d624cad",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Temperature",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "15",
        "seg2": "30",
        "diff": false,
        "className": "",
        "x": 670,
        "y": 1800,
        "wires": []
    },
    {
        "id": "a7e7a5cfabea8293",
        "type": "ui_chart",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "ab40b36f9d624cad",
        "order": 2,
        "width": 6,
        "height": 4,
        "label": "Temperature over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "60",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 700,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "fe666c3e7c6987bc",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors3/thermostat/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1900,
        "wires": [
            [
                "fbc74d1ff00b339e",
                "06c915c1d4184e5b"
            ]
        ]
    },
    {
        "id": "a8bb5bd267970c89",
        "type": "switch",
        "z": "937b4e5e178a38d6",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "30",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 1900,
        "wires": [
            [
                "d08a752a37e27e30"
            ]
        ]
    },
    {
        "id": "329375821ea1a157",
        "type": "ui_toast",
        "z": "937b4e5e178a38d6",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notification",
        "x": 1050,
        "y": 1900,
        "wires": []
    },
    {
        "id": "d08a752a37e27e30",
        "type": "template",
        "z": "937b4e5e178a38d6",
        "name": "Alert msg",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: high temperature detected of {{payload}} C !",
        "output": "str",
        "x": 860,
        "y": 1900,
        "wires": [
            [
                "329375821ea1a157"
            ]
        ]
    },
    {
        "id": "fbc74d1ff00b339e",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 17,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Temperature",
        "format": "{{msg.payload.extra_info.temperature_type}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#ca71ea",
        "x": 470,
        "y": 1980,
        "wires": []
    },
    {
        "id": "06c915c1d4184e5b",
        "type": "function",
        "z": "937b4e5e178a38d6",
        "name": "function 14",
        "func": "msg.payload = msg.payload.value\n// global.get(\"currentTemp\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1900,
        "wires": [
            [
                "3db9d20fe378c1be",
                "a7e7a5cfabea8293",
                "a8bb5bd267970c89"
            ]
        ]
    },
    {
        "id": "546dff6c991fbabc",
        "type": "ui_gauge",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "ab40b36f9d624cad",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Air Quallity (Co2)",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "120",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "50",
        "seg2": "100",
        "diff": false,
        "className": "",
        "x": 690,
        "y": 2020,
        "wires": []
    },
    {
        "id": "24acc5cbf9edb7a7",
        "type": "ui_chart",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "ab40b36f9d624cad",
        "order": 4,
        "width": 6,
        "height": 4,
        "label": "infrared over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "140",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 690,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "d32f16ed6637ee15",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors3/infrared/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 2080,
        "wires": [
            [
                "142b575c1112dd6c",
                "7d3506ece42cfea2"
            ]
        ]
    },
    {
        "id": "142b575c1112dd6c",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 19,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "ICA Category",
        "format": "{{msg.payload.extra_info.ica}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#df85e5",
        "x": 470,
        "y": 2160,
        "wires": []
    },
    {
        "id": "7d3506ece42cfea2",
        "type": "function",
        "z": "937b4e5e178a38d6",
        "name": "function 15",
        "func": "msg.payload = msg.payload.value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2080,
        "wires": [
            [
                "546dff6c991fbabc",
                "24acc5cbf9edb7a7"
            ]
        ]
    },
    {
        "id": "905813c7b49dd2a9",
        "type": "ui_gauge",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "ab40b36f9d624cad",
        "order": 5,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Illumination",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "50",
        "seg2": "300",
        "diff": false,
        "className": "",
        "x": 670,
        "y": 2200,
        "wires": []
    },
    {
        "id": "0b40f2b9f4b71f4d",
        "type": "ui_chart",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "ab40b36f9d624cad",
        "order": 6,
        "width": 6,
        "height": 4,
        "label": "Illumination over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "500",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 700,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "738ec61959de18ac",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors3/illumination/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 2260,
        "wires": [
            [
                "c47810201998e63b",
                "e16f779e7e0ffdc3"
            ]
        ]
    },
    {
        "id": "c47810201998e63b",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 18,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Room Ilumination",
        "format": "{{msg.payload.extra_info.room_ilumination}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#d480e5",
        "x": 490,
        "y": 2340,
        "wires": []
    },
    {
        "id": "e16f779e7e0ffdc3",
        "type": "function",
        "z": "937b4e5e178a38d6",
        "name": "function 16",
        "func": "msg.payload = msg.payload.value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2260,
        "wires": [
            [
                "905813c7b49dd2a9",
                "0b40f2b9f4b71f4d"
            ]
        ]
    },
    {
        "id": "9794a16a447e516a",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors3/smoke/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 2420,
        "wires": [
            [
                "34e0d2f937628451"
            ]
        ]
    },
    {
        "id": "34e0d2f937628451",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 20,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Smoke detected",
        "format": "{{msg.payload.value}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#ce7ae6",
        "x": 480,
        "y": 2420,
        "wires": []
    },
    {
        "id": "d64002e12d9d2b8a",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 15,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Exhibition 3: Summary",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#d788dd",
        "x": 160,
        "y": 1840,
        "wires": []
    },
    {
        "id": "2bad5db04e5109fe",
        "type": "mqtt in",
        "z": "937b4e5e178a38d6",
        "name": "",
        "topic": "/ioto/sensors3/noise/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 2520,
        "wires": [
            [
                "32dbe1ea48f85042"
            ]
        ]
    },
    {
        "id": "11a231b8dbc9a87c",
        "type": "ui_gauge",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "ab40b36f9d624cad",
        "order": 7,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Noise",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "150",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "50",
        "seg2": "100",
        "diff": false,
        "className": "",
        "x": 730,
        "y": 2500,
        "wires": []
    },
    {
        "id": "ca076bb1433fabe2",
        "type": "ui_chart",
        "z": "937b4e5e178a38d6",
        "name": "",
        "group": "ab40b36f9d624cad",
        "order": 8,
        "width": 6,
        "height": 4,
        "label": "Noise over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "150",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 760,
        "y": 2540,
        "wires": [
            []
        ]
    },
    {
        "id": "32dbe1ea48f85042",
        "type": "function",
        "z": "937b4e5e178a38d6",
        "name": "function 17",
        "func": "msg.payload = msg.payload.value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2520,
        "wires": [
            [
                "11a231b8dbc9a87c",
                "ca076bb1433fabe2",
                "bd0e7d1e651fda12"
            ]
        ]
    },
    {
        "id": "bd0e7d1e651fda12",
        "type": "switch",
        "z": "937b4e5e178a38d6",
        "name": "Checking sound noise",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "130",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "70",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "50",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 760,
        "y": 2600,
        "wires": [
            [
                "0f02a6ab9328387e"
            ],
            [
                "329ed211884a4a49"
            ],
            [
                "9f8dd8b21b83e1b5"
            ]
        ]
    },
    {
        "id": "a40e39c2fc63a510",
        "type": "ui_toast",
        "z": "937b4e5e178a38d6",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notification",
        "x": 1230,
        "y": 2580,
        "wires": []
    },
    {
        "id": "329ed211884a4a49",
        "type": "template",
        "z": "937b4e5e178a38d6",
        "name": "High noise",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: Noise detected\nValue: {{payload}} dec.\nMost likely:  Anormal high noise\nExhibition: 3",
        "output": "str",
        "x": 1010,
        "y": 2560,
        "wires": [
            [
                "a40e39c2fc63a510"
            ]
        ]
    },
    {
        "id": "0f02a6ab9328387e",
        "type": "template",
        "z": "937b4e5e178a38d6",
        "name": "Close to pain  limit 3",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: Noise detected\nValue: {{payload}} dec.\nMost likely: danger for visitors\nExhibition: 3\n",
        "output": "str",
        "x": 1030,
        "y": 2520,
        "wires": [
            [
                "a40e39c2fc63a510"
            ]
        ]
    },
    {
        "id": "9f8dd8b21b83e1b5",
        "type": "template",
        "z": "937b4e5e178a38d6",
        "name": "Crowded exhibition",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: Noise detected\nValue: {{payload}} dec.\nMost likely: Crowded exhibition\nExhibition: 3",
        "output": "str",
        "x": 1030,
        "y": 2600,
        "wires": [
            [
                "a40e39c2fc63a510"
            ]
        ]
    },
    {
        "id": "bb00d98abe30c268",
        "type": "ui_text",
        "z": "937b4e5e178a38d6",
        "group": "a3b5b427aefcaa62",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Exhibition 1: Summary",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1020,
        "y": 620,
        "wires": []
    },
    {
        "id": "2497b5819d700e9e",
        "type": "ui_button",
        "z": "7e520411d015e3fa",
        "name": "",
        "group": "d63d7cdc69f4db93",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Welcome to smart house",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "8725432b37013ab6"
            ]
        ]
    },
    {
        "id": "8725432b37013ab6",
        "type": "ui_text",
        "z": "7e520411d015e3fa",
        "group": "d63d7cdc69f4db93",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 370,
        "y": 160,
        "wires": []
    },
    {
        "id": "6ace66cb6cd23984",
        "type": "ui_gauge",
        "z": "7e520411d015e3fa",
        "name": "",
        "group": "9eb12f62ec02142d",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperature input",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "40",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "15",
        "seg2": "30",
        "diff": false,
        "className": "",
        "x": 390,
        "y": 380,
        "wires": []
    },
    {
        "id": "3a65a3bfc579d60b",
        "type": "ui_slider",
        "z": "7e520411d015e3fa",
        "name": "value",
        "label": "slider",
        "tooltip": "",
        "group": "9eb12f62ec02142d",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "45",
        "step": 1,
        "className": "",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "6ace66cb6cd23984",
                "b301f40a36f45d33",
                "5bba586ed4fa621d"
            ]
        ]
    },
    {
        "id": "b301f40a36f45d33",
        "type": "ui_chart",
        "z": "7e520411d015e3fa",
        "name": "",
        "group": "9eb12f62ec02142d",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "temperature over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "40",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 400,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "5bba586ed4fa621d",
        "type": "switch",
        "z": "7e520411d015e3fa",
        "name": "eval temperature",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "15",
                "vt": "num"
            },
            {
                "t": "gte",
                "v": "30",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 390,
        "y": 560,
        "wires": [
            [
                "e3db131e8ae89277"
            ],
            [
                "18c8752d16aab406"
            ],
            [
                "eef0f9ee9bc8869b"
            ]
        ],
        "inputLabels": [
            "temperature"
        ],
        "outputLabels": [
            "",
            "type_temperature",
            ""
        ]
    },
    {
        "id": "18c8752d16aab406",
        "type": "change",
        "z": "7e520411d015e3fa",
        "name": "set as high temperature",
        "rules": [
            {
                "t": "set",
                "p": "temperature_type",
                "pt": "msg",
                "to": "high",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 560,
        "wires": [
            [
                "43f0d3f3713fea2a",
                "e47cb37457a8b4fe"
            ]
        ]
    },
    {
        "id": "e3db131e8ae89277",
        "type": "change",
        "z": "7e520411d015e3fa",
        "name": "set as low temperature",
        "rules": [
            {
                "t": "set",
                "p": "temperature_type",
                "pt": "msg",
                "to": "low",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 500,
        "wires": [
            [
                "43f0d3f3713fea2a",
                "e47cb37457a8b4fe"
            ]
        ]
    },
    {
        "id": "eef0f9ee9bc8869b",
        "type": "change",
        "z": "7e520411d015e3fa",
        "name": "set as normal temperature",
        "rules": [
            {
                "t": "set",
                "p": "temperature_type",
                "pt": "msg",
                "to": "normal",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 640,
        "wires": [
            [
                "43f0d3f3713fea2a",
                "e47cb37457a8b4fe"
            ]
        ]
    },
    {
        "id": "43f0d3f3713fea2a",
        "type": "ui_text",
        "z": "7e520411d015e3fa",
        "group": "9eb12f62ec02142d",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "temperature_type",
        "format": "{{msg.temperature_type}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 620,
        "wires": []
    },
    {
        "id": "e47cb37457a8b4fe",
        "type": "debug",
        "z": "7e520411d015e3fa",
        "name": "print temperature object",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 540,
        "wires": []
    },
    {
        "id": "5c8e66364d64234f",
        "type": "complete",
        "z": "7e520411d015e3fa",
        "name": "window controller",
        "scope": [
            "18c8752d16aab406",
            "e3db131e8ae89277"
        ],
        "uncaught": false,
        "x": 700,
        "y": 740,
        "wires": [
            [
                "5e8e101dee2cdcbf"
            ]
        ]
    },
    {
        "id": "5e8e101dee2cdcbf",
        "type": "switch",
        "z": "7e520411d015e3fa",
        "name": "",
        "property": "temperature_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "high",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "low",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 740,
        "wires": [
            [
                "c89cab16c172de06"
            ],
            [
                "aa2c32987b42972e"
            ]
        ]
    },
    {
        "id": "c89cab16c172de06",
        "type": "change",
        "z": "7e520411d015e3fa",
        "name": "opening window",
        "rules": [
            {
                "t": "set",
                "p": "window_action",
                "pt": "msg",
                "to": "opening window",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 720,
        "wires": [
            [
                "59902a98cd47a279"
            ]
        ]
    },
    {
        "id": "aa2c32987b42972e",
        "type": "change",
        "z": "7e520411d015e3fa",
        "name": "closing window",
        "rules": [
            {
                "t": "set",
                "p": "window_action",
                "pt": "msg",
                "to": "closing window",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 760,
        "wires": [
            [
                "59902a98cd47a279"
            ]
        ]
    },
    {
        "id": "59902a98cd47a279",
        "type": "ui_text",
        "z": "7e520411d015e3fa",
        "group": "9eb12f62ec02142d",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.window_action}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1270,
        "y": 740,
        "wires": []
    },
    {
        "id": "b165b95d3b4a2754",
        "type": "complete",
        "z": "7e520411d015e3fa",
        "name": "eval temperatura",
        "scope": [
            "5bba586ed4fa621d"
        ],
        "uncaught": false,
        "x": 680,
        "y": 860,
        "wires": [
            [
                "51007b16b56364d4"
            ]
        ]
    },
    {
        "id": "51007b16b56364d4",
        "type": "function",
        "z": "7e520411d015e3fa",
        "name": "sensor to ontology",
        "func": "return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 860,
        "wires": [
            [
                "174eab6eeae0b52c"
            ]
        ]
    },
    {
        "id": "174eab6eeae0b52c",
        "type": "debug",
        "z": "7e520411d015e3fa",
        "name": "ontology",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 860,
        "wires": []
    },
    {
        "id": "4a857661854f323e",
        "type": "ui_gauge",
        "z": "9ace7b02e4cf5372",
        "name": "",
        "group": "9de5fce48495669b",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Temperature",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "15",
        "seg2": "30",
        "diff": false,
        "className": "",
        "x": 690,
        "y": 60,
        "wires": []
    },
    {
        "id": "9a78b279aaaeaf9d",
        "type": "ui_chart",
        "z": "9ace7b02e4cf5372",
        "name": "",
        "group": "9de5fce48495669b",
        "order": 2,
        "width": 6,
        "height": 4,
        "label": "Temperature over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "60",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 720,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "5cf60b11b01d118d",
        "type": "mqtt in",
        "z": "9ace7b02e4cf5372",
        "name": "",
        "topic": "/ioto/only-personal/thermostat/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 160,
        "wires": [
            [
                "b4897a015b4c7f8d",
                "c74a0aeace47aab6"
            ]
        ]
    },
    {
        "id": "25265835a91f80dd",
        "type": "switch",
        "z": "9ace7b02e4cf5372",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "30",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 690,
        "y": 160,
        "wires": [
            [
                "dbe357a03161441f"
            ]
        ]
    },
    {
        "id": "e01df0c3dfc90af8",
        "type": "ui_toast",
        "z": "9ace7b02e4cf5372",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notification",
        "x": 1070,
        "y": 160,
        "wires": []
    },
    {
        "id": "dbe357a03161441f",
        "type": "template",
        "z": "9ace7b02e4cf5372",
        "name": "Alert msg",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert: high temperature detected of {{payload}} C !",
        "output": "str",
        "x": 880,
        "y": 160,
        "wires": [
            [
                "e01df0c3dfc90af8"
            ]
        ]
    },
    {
        "id": "b4897a015b4c7f8d",
        "type": "ui_text",
        "z": "9ace7b02e4cf5372",
        "group": "a3b5b427aefcaa62",
        "order": 24,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Temperature",
        "format": "{{msg.payload.extra_info.temperature_type}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#71eaab",
        "x": 490,
        "y": 240,
        "wires": []
    },
    {
        "id": "c74a0aeace47aab6",
        "type": "function",
        "z": "9ace7b02e4cf5372",
        "name": "function 20",
        "func": "msg.payload = msg.payload.value\n// global.get(\"currentTemp\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 160,
        "wires": [
            [
                "4a857661854f323e",
                "9a78b279aaaeaf9d",
                "25265835a91f80dd"
            ]
        ]
    },
    {
        "id": "468736c12f303e87",
        "type": "ui_gauge",
        "z": "9ace7b02e4cf5372",
        "name": "",
        "group": "9de5fce48495669b",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Air Quallity (Co2)",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "120",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "50",
        "seg2": "100",
        "diff": false,
        "className": "",
        "x": 710,
        "y": 280,
        "wires": []
    },
    {
        "id": "0960d468a48b297b",
        "type": "ui_chart",
        "z": "9ace7b02e4cf5372",
        "name": "",
        "group": "9de5fce48495669b",
        "order": 4,
        "width": 6,
        "height": 4,
        "label": "infrared over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "140",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 710,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "8cca144fdbd839a0",
        "type": "mqtt in",
        "z": "9ace7b02e4cf5372",
        "name": "",
        "topic": "/ioto/only-personal/infrared/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 340,
        "wires": [
            [
                "0f055a709aa780fc",
                "2c74a1560249d6f4"
            ]
        ]
    },
    {
        "id": "0f055a709aa780fc",
        "type": "ui_text",
        "z": "9ace7b02e4cf5372",
        "group": "a3b5b427aefcaa62",
        "order": 26,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "ICA Category",
        "format": "{{msg.payload.extra_info.ica}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#85e5af",
        "x": 490,
        "y": 420,
        "wires": []
    },
    {
        "id": "2c74a1560249d6f4",
        "type": "function",
        "z": "9ace7b02e4cf5372",
        "name": "function 21",
        "func": "msg.payload = msg.payload.value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 340,
        "wires": [
            [
                "468736c12f303e87",
                "0960d468a48b297b"
            ]
        ]
    },
    {
        "id": "c57e208af644fc3a",
        "type": "ui_gauge",
        "z": "9ace7b02e4cf5372",
        "name": "",
        "group": "9de5fce48495669b",
        "order": 5,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Illumination",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "50",
        "seg2": "300",
        "diff": false,
        "className": "",
        "x": 690,
        "y": 460,
        "wires": []
    },
    {
        "id": "31121ebef91f7dbe",
        "type": "ui_chart",
        "z": "9ace7b02e4cf5372",
        "name": "",
        "group": "9de5fce48495669b",
        "order": 6,
        "width": 6,
        "height": 4,
        "label": "Illumination over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "500",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 720,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "abac5b99acd17f2f",
        "type": "mqtt in",
        "z": "9ace7b02e4cf5372",
        "name": "",
        "topic": "/ioto/only-personal/illumination/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 520,
        "wires": [
            [
                "71d507c81b1ce789",
                "cd3b4ed0cb0b3132"
            ]
        ]
    },
    {
        "id": "71d507c81b1ce789",
        "type": "ui_text",
        "z": "9ace7b02e4cf5372",
        "group": "a3b5b427aefcaa62",
        "order": 25,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Room Ilumination",
        "format": "{{msg.payload.extra_info.room_ilumination}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#80e5c3",
        "x": 510,
        "y": 600,
        "wires": []
    },
    {
        "id": "cd3b4ed0cb0b3132",
        "type": "function",
        "z": "9ace7b02e4cf5372",
        "name": "function 22",
        "func": "msg.payload = msg.payload.value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 520,
        "wires": [
            [
                "c57e208af644fc3a",
                "31121ebef91f7dbe"
            ]
        ]
    },
    {
        "id": "57e6334d7921654f",
        "type": "mqtt in",
        "z": "9ace7b02e4cf5372",
        "name": "",
        "topic": "/ioto/only-personal/smoke/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 680,
        "wires": [
            [
                "f60f6c1ef32173d7"
            ]
        ]
    },
    {
        "id": "f60f6c1ef32173d7",
        "type": "ui_text",
        "z": "9ace7b02e4cf5372",
        "group": "a3b5b427aefcaa62",
        "order": 27,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Smoke detected",
        "format": "{{msg.payload.value}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#7ae6c5",
        "x": 500,
        "y": 680,
        "wires": []
    },
    {
        "id": "b092a510b837ec3f",
        "type": "ui_text",
        "z": "9ace7b02e4cf5372",
        "group": "a3b5b427aefcaa62",
        "order": 22,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Only Personal: Summary",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#88ddb5",
        "x": 190,
        "y": 100,
        "wires": []
    },
    {
        "id": "45b72281b770af74",
        "type": "mqtt in",
        "z": "9ace7b02e4cf5372",
        "name": "",
        "topic": "/ioto/only-personal/noise/updated",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "50a396fd667d69c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 780,
        "wires": [
            [
                "95a1f02d88aad18c"
            ]
        ]
    },
    {
        "id": "d9c8b8d3bce97e6e",
        "type": "ui_gauge",
        "z": "9ace7b02e4cf5372",
        "name": "",
        "group": "9de5fce48495669b",
        "order": 7,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Noise",
        "label": "units",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "150",
        "colors": [
            "#59c8f7",
            "#16d022",
            "#c74349"
        ],
        "seg1": "50",
        "seg2": "100",
        "diff": false,
        "className": "",
        "x": 750,
        "y": 760,
        "wires": []
    },
    {
        "id": "7609663f34779569",
        "type": "ui_chart",
        "z": "9ace7b02e4cf5372",
        "name": "",
        "group": "9de5fce48495669b",
        "order": 8,
        "width": 6,
        "height": 4,
        "label": "Noise over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "150",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "95a1f02d88aad18c",
        "type": "function",
        "z": "9ace7b02e4cf5372",
        "name": "function 23",
        "func": "msg.payload = msg.payload.value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 780,
        "wires": [
            [
                "d9c8b8d3bce97e6e",
                "7609663f34779569"
            ]
        ]
    }
]